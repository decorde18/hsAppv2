icons
copy/duplicate - HiSquare2Stack
logout - HiArrowRightOnRectangle
edit - HiPencil,
delete - HiTrash,
cancel/small x - HiMiniXMark,
user - HiOutlineUser
settings/3 dots - HiEllipsisVertical
close x - HiXMark
triangle down - HiChevronDown , triangle up- HiChevronUp, HiChevronUpDown
HiOutlineChartBar stats
HiEye - eyeball

useCreateData({ newData, table, view })
  isCreating, createData
          createData(
          {
            table: 'people',
            newData: { ...parentData },
          },)
useData({ table, filter, sort })
  isLoading, data
useUpdateData({ table, newData, id, view })
  isUpdating, updateData
useDeleteData({ view, table, id })
   isDeleting, deleteData
     const playerSeasons = useData({
    table: 'playerSeasons',
    filter: [        field,
        value,
        textSearch(boolean)]
    sort: [{field:'', direction: (boolean), }]
  });

<Heading as="h1" case="upper" location="center">
new player form
</Heading>
<Heading as="h5" case="upper" location="center">

              <FormRow key={field.name} label={field.label} error={''}>
<Row type="vertical" justify="space-between" align='center'>
<Grid  columns={2} rows={2s}>


<Button                 size="small"
                name="allDay"
                value={buttons.allDayValue}
                variation={buttons.allDayValue ? 'primary' : 'secondary'}
                onClick={handleButtonClick}> type = selected  fullWidth
      
  const [selectedBtn, setSelectedBtn] = useState('Season Uniforms');
  function handleButtonGroupChange(e) {
    setSelectedBtn(e.target.name);
  }
      <ButtonGroup
        btnArray={['All Uniforms', 'Season Uniforms']}
        defaultBtn={selectedBtn}
        onChange={handleButtonGroupChange}
      />
   
   
            <Input
              type={each.type}
              disabled={isWorking}
              id={each.field}
              register={{
                ...register(each.field, {
                  required: each.required ? each.message : false,
                }),
              }}
              size={each.size}
              ref={null}
            />
                        <Select
                          width={each.size}
                          options={selectFields
                            .find((field) => field.field === each.field)
                            .values.map((val) => ({ ...val }))
                            .filter((field) =>
                              each.field === 'grade'
                                ? field.filter === selectedCamp
                                : field
                            )}
                          onChange={handleSelectChange}
                          name={each.field}
                          disabled={isWorking}
                          defaultValue={
                            selectFieldValues.find(
                              (field) => field.field === each.field
                            ).value
                          }
                          register={{
                            ...register(each.field, {
                              validate: (value) =>
                                value !== '' || `${each.message}`,
                            }),
                          }}
                        />
      <Select
        width={12.7}
        options={value, label}
        onChange={handleSelectChange}
        name="status"
        disabled={isWorking}
        value={toggleStates['status']}
      />

 Collapsible({ children, animation = defaultAnimationValues, open }

 Checkbox = ({
  label,
  checked,
  onChange,
  size = defaultAnimationValues.size,
  ...props
}
Switch({ checked, onChange, name, disabled })

ModalConfirm({
  resourceName,
  onConfirm,
  disabled,
  onCloseModal,
  confirmType,
})

